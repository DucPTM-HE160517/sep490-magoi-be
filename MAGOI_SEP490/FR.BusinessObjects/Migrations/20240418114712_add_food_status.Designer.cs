// <auto-generated />
using System;
using FR.BusinessObjects.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FR.BusinessObjects.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20240418114712_add_food_status")]
    partial class add_food_status
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FR.BusinessObjects.Models.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("integer");

                    b.Property<float>("TotalAmount")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("FR.BusinessObjects.Models.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FoodScore")
                        .HasColumnType("integer");

                    b.Property<int>("ServingScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("FR.BusinessObjects.Models.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FoodCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 10, 9, 17, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Xúc xích cỡ lớn 300g với đồ muối chua",
                            FoodCategoryId = 1,
                            ImageUrl = "https://res.cloudinary.com/dj1jfpv7y/image/upload/v1712752772/food/x3cmbnieirpdhnwjksx1.jpg",
                            IsActive = true,
                            Name = "BIG BEERFEST SAUSAGES",
                            Quantity = 100,
                            UnitPrice = 199000f
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 10, 9, 17, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Bánh mì bơ tỏi",
                            FoodCategoryId = 1,
                            ImageUrl = "https://res.cloudinary.com/dj1jfpv7y/image/upload/v1712752931/food/sjdjybr8ywcxymb9zs7u.jpg",
                            IsActive = true,
                            Name = "GARLIC BREAD",
                            Quantity = 100,
                            UnitPrice = 30000f
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 10, 9, 17, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Khoai tây chiên",
                            FoodCategoryId = 1,
                            ImageUrl = "https://res.cloudinary.com/dj1jfpv7y/image/upload/v1712752944/food/et1ikezxar76ax8qwbse.jpg",
                            IsActive = true,
                            Name = "FRENCH FRIED",
                            Quantity = 100,
                            UnitPrice = 50000f
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 10, 9, 17, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Thăn lưng Wagyu MB4/5 250g",
                            FoodCategoryId = 2,
                            ImageUrl = "https://res.cloudinary.com/dj1jfpv7y/image/upload/v1712913205/food/rvzq0lp5pst3ndgbiwps.jpg",
                            IsActive = true,
                            Name = "AUS RIB EYE MB4/5",
                            Quantity = 100,
                            UnitPrice = 880000f
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 10, 9, 17, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Thăn Flank Wagyu MB7/8 250g",
                            FoodCategoryId = 2,
                            ImageUrl = "https://res.cloudinary.com/dj1jfpv7y/image/upload/v1712754609/food/lllceyocl5alvttkrek0.jpg",
                            IsActive = true,
                            Name = "AUS RIB EYE MB7/8",
                            Quantity = 100,
                            UnitPrice = 660000f
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2020, 10, 9, 17, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Thăn lưng bò Mỹ Prime 500g",
                            FoodCategoryId = 2,
                            ImageUrl = "https://res.cloudinary.com/dj1jfpv7y/image/upload/v1712754663/food/uz171brtyh6nndmyi1fa.jpg",
                            IsActive = true,
                            Name = "US PRIME RIB EYE",
                            Quantity = 100,
                            UnitPrice = 960000f
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2020, 10, 9, 17, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Thăn Bò Angus chữ T Úc 700g",
                            FoodCategoryId = 2,
                            ImageUrl = "https://res.cloudinary.com/dj1jfpv7y/image/upload/v1712754649/food/dk5p48irgg1qkfu6hem6.jpg",
                            IsActive = true,
                            Name = "AUS BLACK ANGUS T-BONE",
                            Quantity = 100,
                            UnitPrice = 960000f
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2020, 10, 9, 17, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Thăn lưng bò Mỹ 350g",
                            FoodCategoryId = 2,
                            ImageUrl = "https://res.cloudinary.com/dj1jfpv7y/image/upload/v1712913257/food/pxlupobcs1zbfnb8pfwc.jpg",
                            IsActive = true,
                            Name = "US RIB EYE",
                            Quantity = 100,
                            UnitPrice = 596000f
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2020, 10, 9, 17, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Khoai tây nghiền",
                            FoodCategoryId = 3,
                            ImageUrl = "https://res.cloudinary.com/dj1jfpv7y/image/upload/v1712754683/food/wyecqhosqih1dp5kqdoi.jpg",
                            IsActive = true,
                            Name = "MASHED POTATO",
                            Quantity = 100,
                            UnitPrice = 30000f
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2020, 10, 9, 17, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Khoai tây bi đút lò",
                            FoodCategoryId = 3,
                            ImageUrl = "https://res.cloudinary.com/dj1jfpv7y/image/upload/v1712754693/food/qwdsvgxlmkb3o5ihd6w5.jpg",
                            IsActive = true,
                            Name = "ROASTED BABY POTATO",
                            Quantity = 100,
                            UnitPrice = 30000f
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2020, 10, 9, 17, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Coca Cola",
                            FoodCategoryId = 5,
                            ImageUrl = "https://res.cloudinary.com/dj1jfpv7y/image/upload/v1712754713/food/nikdk72dzagoq5uufpyp.jpg",
                            IsActive = true,
                            Name = "COCA COLA",
                            Quantity = 100,
                            UnitPrice = 30000f
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2020, 10, 9, 17, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Nước suối",
                            FoodCategoryId = 5,
                            ImageUrl = "https://res.cloudinary.com/dj1jfpv7y/image/upload/v1712755040/food/gzuhr5ftcbmsw56ugllf.jpg",
                            IsActive = true,
                            Name = "TAPID WATER",
                            Quantity = 100,
                            UnitPrice = 20000f
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2020, 10, 9, 17, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Sinh tố dưa hấu",
                            FoodCategoryId = 5,
                            ImageUrl = "https://res.cloudinary.com/dj1jfpv7y/image/upload/v1712755090/food/zlcwf0ylh37t08xfqnjq.jpg",
                            IsActive = true,
                            Name = "SINH TỐ DƯA HẤU",
                            Quantity = 100,
                            UnitPrice = 50000f
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2020, 10, 9, 17, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Vang đỏ Barolo",
                            FoodCategoryId = 5,
                            ImageUrl = "https://res.cloudinary.com/dj1jfpv7y/image/upload/v1712913229/food/ihmyc6vfwv9mcrhttncg.jpg",
                            IsActive = true,
                            Name = "BAROLA",
                            Quantity = 20,
                            UnitPrice = 700000f
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2020, 10, 9, 17, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Kem cháy gừng cùng với bánh quy giòn",
                            FoodCategoryId = 4,
                            ImageUrl = "https://res.cloudinary.com/dj1jfpv7y/image/upload/v1712755058/food/louyddpnd8jdxfucc0jk.jpg",
                            IsActive = true,
                            Name = "GINGER CREAM BRULEE",
                            Quantity = 100,
                            UnitPrice = 46000f
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2020, 10, 9, 17, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Bánh chocolate nướng chảy, kem vanilla và dừa sấy",
                            FoodCategoryId = 4,
                            ImageUrl = "https://res.cloudinary.com/dj1jfpv7y/image/upload/v1712752851/food/okhglhvncr0ajufxnhvy.jpg",
                            IsActive = true,
                            Name = "WARM CHOCOLATE LAVA CAKE",
                            Quantity = 100,
                            UnitPrice = 50000f
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2020, 10, 9, 17, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Kem Haagen Dazs, chocolate, vanilla, red berries, macha, Maccadmia nut",
                            FoodCategoryId = 4,
                            ImageUrl = "https://res.cloudinary.com/dj1jfpv7y/image/upload/v1712752833/food/sddppgmwzkphvm1in0pi.jpg",
                            IsActive = true,
                            Name = "ICE CREAM HAAGEN DAZS",
                            Quantity = 100,
                            UnitPrice = 88000f
                        });
                });

            modelBuilder.Entity("FR.BusinessObjects.Models.FoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FoodCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Món khai vị"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Món chính"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Đồ ăn kèm"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Món tráng miệng"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Đồ uống"
                        });
                });

            modelBuilder.Entity("FR.BusinessObjects.Models.FoodLabels", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int>("LabelId")
                        .HasColumnType("integer");

                    b.HasKey("FoodId", "LabelId");

                    b.ToTable("FoodLabels");

                    b.HasData(
                        new
                        {
                            FoodId = 1,
                            LabelId = 2
                        },
                        new
                        {
                            FoodId = 2,
                            LabelId = 1
                        },
                        new
                        {
                            FoodId = 3,
                            LabelId = 4
                        },
                        new
                        {
                            FoodId = 4,
                            LabelId = 3
                        },
                        new
                        {
                            FoodId = 5,
                            LabelId = 3
                        },
                        new
                        {
                            FoodId = 6,
                            LabelId = 3
                        },
                        new
                        {
                            FoodId = 7,
                            LabelId = 3
                        },
                        new
                        {
                            FoodId = 8,
                            LabelId = 1
                        },
                        new
                        {
                            FoodId = 9,
                            LabelId = 1
                        },
                        new
                        {
                            FoodId = 10,
                            LabelId = 8
                        },
                        new
                        {
                            FoodId = 11,
                            LabelId = 8
                        },
                        new
                        {
                            FoodId = 12,
                            LabelId = 7
                        },
                        new
                        {
                            FoodId = 13,
                            LabelId = 9
                        },
                        new
                        {
                            FoodId = 14,
                            LabelId = 2
                        },
                        new
                        {
                            FoodId = 14,
                            LabelId = 6
                        },
                        new
                        {
                            FoodId = 15,
                            LabelId = 6
                        },
                        new
                        {
                            FoodId = 16,
                            LabelId = 2
                        },
                        new
                        {
                            FoodId = 16,
                            LabelId = 6
                        });
                });

            modelBuilder.Entity("FR.BusinessObjects.Models.FoodOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<string>("FoodNote")
                        .HasColumnType("text");

                    b.Property<int>("FoodOrderStatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrderAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.HasKey("OrderId", "FoodId");

                    b.ToTable("FoodOrder");
                });

            modelBuilder.Entity("FR.BusinessObjects.Models.FoodOrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FoodOrderStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Uncooked"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Cooking"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Cooked"
                        });
                });

            modelBuilder.Entity("FR.BusinessObjects.Models.Labels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Labels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Món nóng"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Món lạnh"
                        },
                        new
                        {
                            Id = 3,
                            Label = "Món nướng"
                        },
                        new
                        {
                            Id = 4,
                            Label = "Món chiên"
                        },
                        new
                        {
                            Id = 5,
                            Label = "Bánh"
                        },
                        new
                        {
                            Id = 6,
                            Label = "Kem"
                        },
                        new
                        {
                            Id = 7,
                            Label = "Nước ép"
                        },
                        new
                        {
                            Id = 8,
                            Label = "Nước ngọt"
                        },
                        new
                        {
                            Id = 9,
                            Label = "Rượu vang"
                        });
                });

            modelBuilder.Entity("FR.BusinessObjects.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FR.BusinessObjects.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Cooking"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Serving"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Finished"
                        });
                });

            modelBuilder.Entity("FR.BusinessObjects.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Method = "Cash"
                        },
                        new
                        {
                            Id = 2,
                            Method = "Banking"
                        },
                        new
                        {
                            Id = 3,
                            Method = "CreditCard"
                        });
                });

            modelBuilder.Entity("FR.BusinessObjects.Models.Session", b =>
                {
                    b.Property<string>("ExpoToken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ExpoToken");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("FR.BusinessObjects.Models.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e4761a1-22d2-4a1e-a0da-e9224d75f6bb"),
                            Name = "Bàn 1",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("24421c43-7ce9-49f9-b279-545130db8777"),
                            Name = "Bàn 2",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("72d44212-da44-4735-9846-af8e859c2086"),
                            Name = "Bàn 3",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("a6c5a1d6-1942-48fc-9eca-1b5e9499ba6d"),
                            Name = "Bàn 4",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("b9da28be-79af-4258-8cd7-c608c5fa2d8c"),
                            Name = "Bàn 5",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("464d6381-2f42-4d17-9402-b4fb1728623e"),
                            Name = "Bàn 6",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("79709257-f504-4186-aea9-d87a316ff42e"),
                            Name = "Bàn 7",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("00d6469a-ec3c-4e59-ad00-b2ddb9e34021"),
                            Name = "Bàn 8",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("42faf975-c839-4282-a42c-4df9963c3d4c"),
                            Name = "Bàn 9",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("f63c6d7a-7d37-4a06-a80c-a311424eac59"),
                            Name = "Bàn 10",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("cca0bf6c-af6e-4c37-8636-db7a562bb57e"),
                            Name = "Bàn 11",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("9e4241f8-ad17-48c4-8f49-9bb8607285c4"),
                            Name = "Bàn 12",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("FR.BusinessObjects.Models.TableStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TableStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Serving"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Booked"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
